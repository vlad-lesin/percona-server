# Bugs lp:1464468, lp:1438990, lp:1483251
# Slave crash with malformed binlog event

--source include/have_innodb.inc
--source include/have_debug.inc
--source include/have_binlog_format_row.inc

--let $rpl_topology= 1->2->3
--source include/rpl_init.inc

--connection server_1

DROP TABLE IF EXISTS `t`;

CREATE TABLE `t` (
  `f1` int(10) unsigned NOT NULL,
  PRIMARY KEY (`f1`)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS `t2`;

CREATE TABLE `t2` (
  `f1` int(10) unsigned NOT NULL,
  PRIMARY KEY (`f1`)
) ENGINE=InnoDB;



DROP TRIGGER IF EXISTS `t_insert_trig`;

--echo ================================
--echo = Testing for fix of lp:1464468,
--echo = if there is no assertion in debug
--echo = build then the test is passed.
--echo ================================

--delimiter |
CREATE TRIGGER `t_insert_trig` AFTER INSERT ON `t`
	FOR EACH ROW 
		BEGIN
    
      DECLARE EXIT HANDLER FOR SQLEXCEPTION
	    BEGIN
   		  ROLLBACK TO `savepoint_1`;
# If the bug is not fixed then debug build will crash here with assertion.
	    END;

		  SAVEPOINT `savepoint_1`;

      INSERT INTO `dummy` VALUES (1);

		END |
--delimiter ;

INSERT INTO `t` VALUES (2);
INSERT INTO `t` VALUES (3);

DROP TRIGGER `t_insert_trig`;

--echo ================================
--echo = Testing for fix of lp:1483251.
--echo = There must be "COMMIT" after 
--echo = trigger's body execution in
--echo = binary log.
--echo ================================

--delimiter |
CREATE TRIGGER `t_insert_trig` AFTER INSERT ON `t`
	FOR EACH ROW 
		BEGIN
		  SAVEPOINT `savepoint_1`;
		END |
--delimiter ;

INSERT INTO `t` VALUES (4);
INSERT INTO `t` VALUES (5);

DROP TRIGGER `t_insert_trig`;

--echo =================================================
--echo = Except lp:1483251 this also tests lp:438990,
--echo = i.e. table map must be written after SAVEPOINT
--echo = and before the next statement in trigger or sp.
--echo =================================================

--delimiter |
CREATE TRIGGER `t_insert_trig` AFTER INSERT ON t
	FOR EACH ROW 
		BEGIN
		  SAVEPOINT `savepoint_1`;
      INSERT INTO `t2` VALUES (NEW.f1);
		END |
--delimiter ;

INSERT INTO `t` VALUES (6);
INSERT INTO `t` VALUES (7);

DROP TRIGGER `t_insert_trig`;

--echo =================================================
--echo = Test for lp:438990,
--echo = i.e. table map must be written after SAVEPOINT
--echo = and before the next statement in trigger or sp.
--echo =================================================

--delimiter |

CREATE PROCEDURE `p1`(IN param INT)
BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
                BEGIN
                        ROLLBACK TO `savepoint_1`;
                        INSERT `t2` VALUES (param);
                END;

        SAVEPOINT `savepoint_1`;

        INSERT INTO dummy VALUES (1);

        RELEASE SAVEPOINT `savepoint_1`;
END|

CREATE TRIGGER `t_insert_trig` AFTER INSERT ON `t` FOR EACH ROW CALL `p1`(NEW.f1)|

--delimiter ;

INSERT INTO `t` VALUES (8);
INSERT INTO `t` VALUES (9);

DROP PROCEDURE `p1`;
DROP TRIGGER `t_insert_trig`;

--echo =================================================
--echo = Test for savepoints outside of SP or trigger
--echo =================================================

BEGIN;
  INSERT INTO `t` VALUES (10);
  SAVEPOINT `savepoint_1`;
  INSERT INTO `t` VALUES (11);
COMMIT;

BEGIN;
  INSERT INTO `t` VALUES (12);
  SAVEPOINT `savepoint_1`;
  INSERT INTO `t` VALUES (13);
  ROLLBACK TO SAVEPOINT `savepoint_1`;
COMMIT;

--echo ===================================================
--echo = Test for SPs and functions. Must work independent
--echo = of the fix.
--echo ===================================================

--delimiter |

CREATE PROCEDURE `p1`(IN param INT)
BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
                BEGIN
                        ROLLBACK TO savepoint1;
                        INSERT `t2` VALUES (param);
                END;

        START TRANSACTION;

        SAVEPOINT savepoint1;

        INSERT INTO dummy VALUES (1);

        RELEASE SAVEPOINT `savepoint_1`;

        COMMIT;
END|

CREATE PROCEDURE `p2`()
BEGIN
        START TRANSACTION;

        SAVEPOINT savepoint1;

        COMMIT;
END|

CREATE FUNCTION func(param INT) RETURNS INT
BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
                BEGIN
                        ROLLBACK TO savepoint1;
                        INSERT `t2` VALUES (param);
                        RETURN 2;
                END;

        SAVEPOINT savepoint1;
        INSERT INTO dummy VALUES (1);
        RELEASE SAVEPOINT `savepoint_1`;
        RETURN 1;
END|

--delimiter ;

CALL p1(1000);
CALL p2();
SELECT func(2000);

DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP FUNCTION func;

DROP TABLE `t`;
DROP TABLE `t2`;

--echo ==============================
--echo = Server 1 binary log
--echo ==============================
--source include/show_binlog_events.inc
--source include/rpl_sync.inc

--echo ==============================
--echo = Server 2 binary log
--echo ==============================
--connection server_2
--source include/show_binlog_events.inc
--source include/rpl_sync.inc

--echo ==============================
--echo = Server 3 binary log
--echo ==============================
--connection server_3
--source include/show_binlog_events.inc

--source include/rpl_end.inc
